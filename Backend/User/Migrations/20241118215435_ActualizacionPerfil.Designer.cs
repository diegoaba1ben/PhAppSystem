// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhAppUser.Infrastructure.Context;

#nullable disable

namespace User.Migrations
{
    [DbContext(typeof(PhAppUserDbContext))]
    [Migration("20241118215435_ActualizacionPerfil")]
    partial class ActualizacionPerfil
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CuentaUsuarioPerfil", b =>
                {
                    b.Property<Guid>("CuentaUsuarioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PerfilId")
                        .HasColumnType("char(36)");

                    b.HasKey("CuentaUsuarioId", "PerfilId");

                    b.HasIndex("PerfilId");

                    b.ToTable("CuentaUsuarioPerfil");
                });

            modelBuilder.Entity("PerfilRol", b =>
                {
                    b.Property<Guid>("PerfilId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RolId")
                        .HasColumnType("char(36)");

                    b.HasKey("PerfilId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("PerfilRol");
                });

            modelBuilder.Entity("PermisoRol", b =>
                {
                    b.Property<Guid>("PermisosId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("char(36)");

                    b.HasKey("PermisosId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermisoRol");
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.CuentaUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Afiliacion")
                        .HasColumnType("int");

                    b.Property<string>("ApellidosCompletos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DiasPendientes")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaInactivacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimoLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NombresCompletos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("SujetoRetencion")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TarjProf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoContrato")
                        .HasColumnType("int");

                    b.Property<int>("TipoCuenta")
                        .HasColumnType("int");

                    b.Property<int>("TipoId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoIdTrib")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CuentaUsuario", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Perfil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Perfil", (string)null);
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Permiso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permiso", (string)null);
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Pension", b =>
                {
                    b.HasBaseType("PhAppUser.Domain.Entities.CuentaUsuario");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RazonSocialPension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Pension", (string)null);
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.RepLegal", b =>
                {
                    b.HasBaseType("PhAppUser.Domain.Entities.CuentaUsuario");

                    b.Property<string>("CertLegal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.ToTable("RepLegal", (string)null);
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Salud", b =>
                {
                    b.HasBaseType("PhAppUser.Domain.Entities.CuentaUsuario");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RazonSocialSalud")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Salud", (string)null);
                });

            modelBuilder.Entity("CuentaUsuarioPerfil", b =>
                {
                    b.HasOne("PhAppUser.Domain.Entities.CuentaUsuario", null)
                        .WithMany()
                        .HasForeignKey("CuentaUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhAppUser.Domain.Entities.Perfil", null)
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerfilRol", b =>
                {
                    b.HasOne("PhAppUser.Domain.Entities.Perfil", null)
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhAppUser.Domain.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermisoRol", b =>
                {
                    b.HasOne("PhAppUser.Domain.Entities.Permiso", null)
                        .WithMany()
                        .HasForeignKey("PermisosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhAppUser.Domain.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Perfil", b =>
                {
                    b.HasOne("PhAppUser.Domain.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Rol", b =>
                {
                    b.HasOne("PhAppUser.Domain.Entities.Area", "Area")
                        .WithMany("Roles")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Pension", b =>
                {
                    b.HasOne("PhAppUser.Domain.Entities.CuentaUsuario", null)
                        .WithOne()
                        .HasForeignKey("PhAppUser.Domain.Entities.Pension", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.RepLegal", b =>
                {
                    b.HasOne("PhAppUser.Domain.Entities.CuentaUsuario", null)
                        .WithOne()
                        .HasForeignKey("PhAppUser.Domain.Entities.RepLegal", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Salud", b =>
                {
                    b.HasOne("PhAppUser.Domain.Entities.CuentaUsuario", null)
                        .WithOne()
                        .HasForeignKey("PhAppUser.Domain.Entities.Salud", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhAppUser.Domain.Entities.Area", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
